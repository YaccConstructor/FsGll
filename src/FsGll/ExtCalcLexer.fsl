{
module FsGll.ExtCalcLexer 

open System
open Microsoft.FSharp.Text.Lexing

type Lexem = 
    | EOF
    | INT of int
    | FLOAT of float
    | IDENTIFIER of string
    | PLUS | MINUS | MULT | DIV
    | EQ | LT | LE | GT | GE
    | SYM of string


let ops =
    [
        "+",    PLUS;
        "-",    MINUS;
        "*",    MULT;
        "/",    DIV;
        "=",    EQ;
        "<",    LT;
        "<=",   LE;
        ">",    GT;
        ">=",   GE;
    ] |> Map.ofList
}	

let char        = ['a'-'z' 'A'-'Z']   
let digit       = ['0'-'9']   
let int         = digit+   
let float       = digit+ '.' digit+   
let identifier  = char(char|digit|['_'])*
let whitespace  = [' ' '\t']
let newline     = "\n\r" | '\n' | '\r'
let operator    = "+" | "-" | "*" | "/" | ">" | ">=" | "<" | "<=" | "="
let sym         = "(" | ")" | ","

rule tokenize = parse
| whitespace    { tokenize lexbuf }   
| newline       { lexbuf.EndPos <- lexbuf.EndPos.NextLine; tokenize lexbuf; }   
| float         { FLOAT(Double.Parse(LexBuffer<_>.LexemeString lexbuf)) }
| int           { INT(Int32.Parse(LexBuffer<_>.LexemeString lexbuf)) }
| identifier    { IDENTIFIER(LexBuffer<_>.LexemeString lexbuf) }
| operator      { ops.[LexBuffer<_>.LexemeString lexbuf] }
| sym           { SYM(LexBuffer<_>.LexemeString lexbuf) }
| eof           { EOF }