{
module FsGll.ExtCalcLexer 

open System
open Microsoft.FSharp.Text.Lexing

[<CustomEquality; NoComparison>]
type Lexem = 
    | EOF
    | COMMA
    | INT of int
    | FLOAT of float
    | IDENTIFIER of string
    | PLUS | MINUS | MULT | DIV 
    | EQ | LT | LE | GT | GE
    | LPAREN | RPAREN
    | SEMICOLON
    override this.Equals that = 
        match that with
        | :? Lexem as l -> 
            match this with EOF ->    (match l with EOF -> true | _ -> false)
                          | COMMA ->  (match l with COMMA -> true | _ -> false)
                          | PLUS ->   (match l with PLUS -> true | _ -> false)
                          | MINUS ->  (match l with MINUS -> true | _ -> false)
                          | MULT ->   (match l with MULT -> true | _ -> false)
                          | DIV ->    (match l with DIV -> true | _ -> false)
                          | EQ ->     (match l with EQ -> true | _ -> false)
                          | LPAREN -> (match l with LPAREN -> true | _ -> false)
                          | RPAREN -> (match l with RPAREN -> true | _ -> false)
                          | SEMICOLON -> (match l with SEMICOLON -> true | _ -> false)
                          | LT ->     (match l with LT -> true | _ -> false)
                          | _ -> false
        | _ -> failwith "Lexem expected"

let ops =
    [
        "+",    PLUS;
        "-",    MINUS;
        "*",    MULT;
        "/",    DIV;
        "=",    EQ;
        "<",    LT;
        "<=",   LE;
        ">",    GT;
        ">=",   GE;
    ] |> Map.ofList
}	

let char        = ['a'-'z' 'A'-'Z']   
let digit       = ['0'-'9']   
let int         = digit+   
let float       = digit+ '.' digit+   
let identifier  = char(char|digit|['_'])*
let whitespace  = [' ' '\t']
let newline     = "\n\r" | '\n' | '\r'
let operator    = "+" | "-" | "*" | "/" | ">" | ">=" | "<" | "<=" | "="
let paren       = "(" | ")"

rule tokenize = parse
| whitespace    { tokenize lexbuf }   
| newline       { lexbuf.EndPos <- lexbuf.EndPos.NextLine; tokenize lexbuf; }   
| float         { FLOAT(Double.Parse(LexBuffer<_>.LexemeString lexbuf)) }
| int           { INT(Int32.Parse(LexBuffer<_>.LexemeString lexbuf)) }
| identifier    { IDENTIFIER(LexBuffer<_>.LexemeString lexbuf) }
| operator      { ops.[LexBuffer<_>.LexemeString lexbuf] }
| paren         { match LexBuffer<_>.LexemeString lexbuf  with "(" -> LPAREN | _ -> RPAREN }
| ','           { COMMA }
| ';'           { SEMICOLON }
| eof           { EOF }